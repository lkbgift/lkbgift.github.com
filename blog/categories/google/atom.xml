<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: google | Blog | RememberLenny]]></title>
  <link href="http://blog.rememberlenny.com/blog/categories/google/atom.xml" rel="self"/>
  <link href="http://blog.rememberlenny.com/"/>
  <updated>2014-01-06T22:39:18-05:00</updated>
  <id>http://blog.rememberlenny.com/</id>
  <author>
    <name><![CDATA[Leonard Kiyoshi Bogdonoff]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[I returned my Google Glass after 30 days]]></title>
    <link href="http://blog.rememberlenny.com/blog/2014/01/05/i-return-ed-my-google-glass-after-30-days/"/>
    <updated>2014-01-05T12:06:00-05:00</updated>
    <id>http://blog.rememberlenny.com/blog/2014/01/05/i-return-ed-my-google-glass-after-30-days</id>
    <content type="html"><![CDATA[<h1>I returned Google Glass</h1>

<p>At the end of November, I was one of the thousands of people who receive the next round of invitations for Google Glass. After the v2 explorer edition was announced, I responded to an email from the Google Developers Group meetup in New York City. The email offered a Google Glass invitation code to anyone interested in acquiring the device.</p>

<p>Initially, I was completely sure I would want the device. I immediately responded to the email and excitedly told my roommate. Based on the timing of the invitation code request, I had to wait over the Thanksgiving holiday period before hearing a reply. During the time, I went home and spent an extended period researching the Google Glass status.</p>

<p>Many of the blogs online weren&rsquo;t very diverse in opinion. There were the two camps of: &ldquo;Its not where it could be, but I love the potential&rdquo; and &ldquo;This thing is way too expensive for what it can do&rdquo;. Through reading state of Google Glass, I found that the battery life was poor, there was no integration with iOS (since December, this changed), the app eco-system was not extensive, and you couldn&rsquo;t use it with perscription glasses. While I ocilated on my perspective toward buying Glass, I decided to go ahead with it.</p>

<p>Upon receiving confirmation of an invitation code, I setup my pick up date. Suprisingly, after I told my roommate, he applied for a Glass invite and was able to get a pair. After seeing his pair, I was reinvigorated to experiement with the new technology. In fact, because he had a pair, I started to imagine a number of possibilities involving multiple Glass users.</p>

<h2>Wearing Glass</h2>

<p>Wearing Glass in New York isnt too obscure. My roommate says it make you a &ldquo;C class celebrity&rdquo;. People look at you in the subway. Glass becomes a easy point to start a conversation. I even feel like you get special treatment at resturants. Regardless, it also becomes an impediment for feeling comfortable around people. Its an expensive piece of technology that draws attention.</p>

<p>I found that initially I was very interested in the different applications offered on Glass. The most interesting application is called Field Trips. Field Trips uses your current location to feed you relevant information about places around you. For example, Field Trips pulls in historic information about the landmarks around you. When you pass the area, you get a &ldquo;card&rdquo; that tells you the areas significance. There was a building in my community that I really admired, but never knew its historic significance. After walking by the building while wearing Glass, I got a &ldquo;card&rdquo; about the building. This blew my mind.</p>

<p>In most of December, Glass didnt have an iOS app. As a result, there was very limited functionality. There were no maps, very little SMS integration, and quickly drained phone battery. Even with these limitations, wearing Glass was awesome.</p>

<p>In mid-December, Glass updated itself overnight and introduced new features. This was impressive. The coolest was a &ldquo;Wink&rdquo; recognition feature that was not previously accessible. This feature allowed you to take pictures by winking with your right eye. Although the wink detection would occasionally lose calibration, the feature was very impressive.</p>

<p>Around the same time, the iOS application was released. This gave the Glass the ability to integrate with the iPhone. With the iOS app, Glass users could get directions without an Android device. This was very useful, but still not as impressive as I hoped. Even in the cold December weather, I found it easier to pull out my iPhone and look on Google Maps. When I needed to go to obscure addresses, it became impossible to &ldquo;speak&rdquo; the appropriate address.</p>

<p>My biggest struggle was the limited user interface on the Glass. While the device itself is best fit for voice activation, you can also use a number of gestures. I found  the current interface too one-dimensional. When trying to set a Timer or procede through a list of application options, finding and selecting the prefered choice was difficult. Im sure this will be improved and no longer be an issue in the future.</p>

<h2>Personal impressions</h2>

<p>The reason Im returning Glass is less to do with the technology and more to do with the social implications. I had some great use cases, such as ease of recording personal interviews, as well as some bad acusations from stragners. Overall, the response from people was more positive than anything. People wanted to know about the &ldquo;cool looking glasses&rdquo;. Most lay people don&rsquo;t follow tech news, so they have no idea what the Glass is. I found that there was a higher population of young men who responded to Glass positively. Oppositely, I found the largest group of negative responses to come from middle-aged woman.</p>

<p>My biggest issue with Glass was the disruptive quality when looking at or talking with people. Glass doesn&rsquo;t disrupt your field of view, but it does feel like a barrier when interacting with other people. Once talking to someone, the Glass can be easily ignored, but I always felt a sense of discomfort.</p>

<p>My greatest joy with Glass was letting other people wear it. I found that younger people were very adept and using the voice activated commands. Oppositely, people in the twentys would wear the Glass and passively wait for something to happen. Adults who I had wear the Glass were often impressed by the device, but not as interested in trying it on.</p>

<p>After the honeymoon phase, I found myself using the Glass as a glorified watch. It because very easy to look at the time. I can imagine that great applications would be able to provide very valuable snippets of information with ease. For the time being, the information that is being served is not personally convincing for the need to have Glass. For the time being, even the best Glass apps are accessible via mobile devices. The moment Glass will shine is when apps are exclusively avaliable for Glass.</p>

<h2>Reason for returning</h2>

<p>I am returning Glass because I feel guilty about how much it costs. Buying the Glass was not a financial burden. As a software developer, I can justify expensive technology purchases because if they benefit my quality of life. Even if I dont use the device frequently, I would justify the value if it was useful when needed. I found this to be the case with buying a nice moniter for use at home and a high quality light laptop.</p>

<p>Still, the notion that I paid $1500 for the Glass felt obscure. Between the number of people who work low-paying hourly jobs, my mother included, I felt it was ridiculous to have such an expensive luxury item. The Glass would require more than a months worth of paychecks for most people to buy. Knowing that I was wearing the thing around without having much utilitive value kept reminding me how I was wasting the financial capital invested into the piece of technology.</p>

<p>If the device was a third of the cost, I could begin to justify the cost. For the time being, I am embarrased to be paying two months rent to feel apart of an exclusive group. While I think its amazing, I dont feel comfortable participating.</p>

<h2>Overall thoughts</h2>

<p>Considering my grievances about the user experience, I know these will be worked out. I have no question that the team working on Glass (officially and unofficially) are building amazing software. The potential for having a freely accessible camera and screen is brilliant. I can imagine security guards with Glass networks. Having a network of other &ldquo;eyes&rdquo; that you could access at the command of a voice seems useful in a number of professional use cases. I can see great social implications where people can see digital geo-fence activated messages based on their social networks. The Glass-like technologies have only jsut begun. I will be waiting with excitement to see the continued maturation of the Glass platform and users.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Hackathon]]></title>
    <link href="http://blog.rememberlenny.com/blog/2013/02/02/how-to-hackathon/"/>
    <updated>2013-02-02T11:45:00-05:00</updated>
    <id>http://blog.rememberlenny.com/blog/2013/02/02/how-to-hackathon</id>
    <content type="html"><![CDATA[<h1>The state of Hackathon-ing</h1>

<p><em>Last week I attended a Hackathon put on by Google&rsquo;s Youtube and GTV team. I was introduced to the event through GOOD Magazine&rsquo;s Coding for Good project. While I was not directly participating with GOOD, I ended up working closely with their team members. This Hackathon was particularly different from the other two I have attended. Mainly, there were a lot more engineers and interest in building a product (rather than a business).</em></p>

<p><img src="http://i.imgur.com/dX0FPPq.png" alt="Mindmap from our group" /></p>

<h2>Why attend?</h2>

<p>Most Hackathon&rsquo;s involve a business organizing developers for a prize. The prize is given to the developer(s) who produce a project that is determined to best fit the event&rsquo;s criteria. The company organizing the events often provides general information about the event, so that developers can learn a bit about the API&rsquo;s and technologies expected to be used. While the API research can be valuable, the Hackathon&rsquo;s will often have support from the API maintainers. This means you can get hard questions answered and have your questions directed to the write place.</p>

<h2>Process</h2>

<p>The beginning of every Hackathon I&rsquo;ve been to starts with a bit of networking. After the networking there is a short explanation by the organizers about what is expected throughout the event. Finally, there is a period of time for participants to pitch a project idea to an audience. The period for pitching is normally very short, requiring the pitchers to condense their project idea into a easy to understand statement.</p>

<p>Once all the pitches are completed (or the time allotted for pitches is exhausted), participants make their way to learn more about the projects pitched. In most cases, people show up to the even without a project in mind, so they need to join a group. Additionally, not all people who pitch a project will have a group to organize.</p>

<p>The groups that succeed in developing a group are often clear projects that can be completed in a short period of time. More so, the leader of the group must have some clarity on where the project is expected to go, what the group requires to be successful, and how to get a group of strangers to work together.</p>

<p>Once groups have formed and projects are defined, the group begins hashing out the work to do for the weekend. Often a pitch can be vague and undeveloped. Other times the pitch may make assumptions about the capacity of one weekend of hacking. As a result, the refining period is used to redefine the project based on the groups developer talent.</p>

<p>The next phase is the longest. The group gets down and dirty to build the product they discussed. The building process requires research, design, application, testing, and deployment. The rest of the event is intended to get a group as far along as possible in building their product.</p>

<p>The Hackathon is meant to launch good ideas into minimum viable products. This means the product itself doesn&rsquo;t need to be perfect. It doesn&rsquo;t even need to fully work. Instead, the project just needs to do the most basic function that your group wants to focus on. As the project is judged based on a short judge-demo, the project can have its smoke and mirrors to create the perception of a working project.</p>

<h1>Tips for attendees.</h1>

<h2>1. You don&rsquo;t need to know anyone.</h2>

<p>Don&rsquo;t worry. Not knowing anyone at the Hackathon is one of the best parts of the event. Sure you can show up with your fellow developer friends (which not everyone has), but you don&rsquo;t need to worry about that. By showing up to the event, you are assuring yourself that you will make great connections with fellow group members. So, first point: don&rsquo;t worry if you don&rsquo;t know anyone but want to attend. You will meet people and make good friends.</p>

<h2>2. Refine your pitch into one sentence</h2>

<p>Refining your pitch into one sentence means simplifying it. When you explain the idea to people, you have to convince them to work with you. More so, you have to know what you can do in one weekend. Think through your idea and figure out how to cut out any parts that are unnecessary for its ability to prove its viability. Don&rsquo;t focus on periphery functions. Make sure the product does what you say its going to do and nothing more. If you want more, worry about that after your team is bug-free.</p>

<h2>3. Pick a subject for your project ahead of time</h2>

<p>When you are pitching an idea, you will be standing in front of a crowd of people you don&rsquo;t know. No matter how many times you have done this, you will feel a bit nervous. This is normal. Just do what you can to refine your idea ahead of time and don&rsquo;t try to &lsquo;wing-it&rsquo;.
Its best if you can put some time in before the event to refine an idea. Its good to have a few ideas, because the ideas will change anyway. The important point is that you identify the subject of your idea. Once you pick that, you can figure out how to execute the idea later.
People who join your group will not necessarily understand the functionality of your product. Instead, you will be selling the importance of your subject matter and attract people who have also thought about the problem.</p>

<h2>4. Give out a simple way to contact you during any broadcast opportunities (pitch, pre-event idea board, etc)</h2>

<p>If you get the chance to post your idea in a area that is public to the participants, make sure to provide contact information! Imagine if you are reading a list of ideas and are very interested in one of them, but don&rsquo;t know how to get ahold of the group leader. Instead, someone who is sitting near you at the event asks you what you do, and then convinces you to join their group. You don&rsquo;t want this to happen.
Give out your phone number, twitter handle, or what ever you use when pitching your idea. Also make sure to leave with a note about where you are sitting and how to find you. Its too often that participants are listening to a stream of ideas and even if they liked what you said, they forgot about it and don&rsquo;t know how to find you.</p>

<h2>5. Use visual tools when describe your idea in a small group</h2>

<p>The more articulate you can be about an idea, the better. There are countless reasons for this, but mainly it will help you refine your ideas. When making a mind map (I love using MindNode Pro), you start to see the functional relations between your idea and their dependencies.
More so, when you visualize your idea, you can be sure your group understands what the project is. Theres nothing worse then having worked on a project for a day and realizing the everyone in the group doesn&rsquo;t exactly know what is being built. To prevent this, have a sit down period where you visually layout what is expected out of your idea. This will come in handy later, so people can voluntarily pick up sections of the project to complete.</p>

<h2>6. Build your project in small but complete parts</h2>

<p>Rather then trying to build tons of separate parts that come together at the end, try to build your project in small but functional parts. If you have a process that your project depends on (parsing information, calling an API, displaying the content, getting feedback, etc.), make sure the parts are able to function on their own. Seeing groups work on a project for a weekend, then not being able to get done with the &ldquo;one part&rdquo; they needed to get it online is horrible.
If you build a project, try to have each part be presentable in itself. Having those parts come together and function together is your end goal, but worst case you have parts of the project you can show. Remember, you just need to convince the judges that the idea is viable.</p>

<h2>7. Pair program if your team can handle it</h2>

<p>Having two people work on a part of the application at a time is an efficient way to make sure you are making constant progress. I have seen myself get stuck on a problem for 2-3 hours, when it would have been something easy for another person to resolve. Oppositely, I&rsquo;ve seen people get stuck on design elements which would have taken me a couple minutes to mock up properly.
By combining forces on development, you can make sure your group makes steady progress. This also means your team members will not get caught up figuring out how to integrate another persons code. While working as individuals may feel productive, as soon as integration issues pop-up, you take away from both people making any progress.</p>

<h2>8. Make friends with other participants</h2>

<p>Most importantly, the point of a Hackathon (for the participants) is to have fun. Only one group is going to win the big prize, but anyone can network. Personally, I love meeting the participants who enjoy coming out to these events and spend a weekend learning something new.</p>

<h2>9. Ask questions!!!</h2>

<p>Also, a great way to learn new technologies is by doing. The best way is by teaching. There are certain to be people who are learning new technologies themselves and would love to teach you for the sake of defining their own understandings. Never be afraid to ask other people to teach and help you with your issues. Even if they are in a competing group.</p>
]]></content>
  </entry>
  
</feed>
